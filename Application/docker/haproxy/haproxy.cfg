#==============================================================================
# HelixTrack Core - HAProxy Load Balancer Configuration
#
# Features:
# - Load balancing across multiple Core service instances
# - Consul service discovery integration
# - Health checking
# - SSL termination
# - Statistics dashboard
# - Connection pooling
#==============================================================================

#==============================================================================
# Global settings
#==============================================================================
global
    log stdout format raw local0
    log stdout format raw local1 notice

    # Performance tuning
    maxconn 4096
    tune.ssl.default-dh-param 2048

    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

    # Stats socket for runtime API
    stats socket /var/run/haproxy.sock mode 660 level admin expose-fd listeners
    stats timeout 30s

#==============================================================================
# Default settings
#==============================================================================
defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor except 127.0.0.0/8
    option  redispatch

    # Timeouts
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout queue 30s
    timeout tunnel 1h

    # Error handling
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

#==============================================================================
# Statistics dashboard
#==============================================================================
frontend stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats show-legends
    stats show-desc HelixTrack Load Balancer Statistics

    # Authentication (change in production!)
    stats auth admin:admin

    # Show server health
    stats show-node

#==============================================================================
# Frontend - Main entry point
#==============================================================================
frontend http_front
    bind *:80
    mode http

    # HTTP headers
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Real-IP %[src]

    # CORS handling
    capture request header origin len 128
    http-response add-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if { capture.req.hdr(0) -m found }
    http-response add-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" if { capture.req.hdr(0) -m found }
    http-response add-header Access-Control-Allow-Headers "Content-Type, Authorization" if { capture.req.hdr(0) -m found }
    http-response add-header Access-Control-Allow-Credentials true if { capture.req.hdr(0) -m found }

    # Handle OPTIONS requests (CORS preflight)
    http-request return status 200 content-type "text/plain" if METH_OPTIONS

    # Logging
    http-request capture req.hdr(User-Agent) len 128
    http-request capture req.hdr(X-Forwarded-For) len 64

    # Route to backend
    default_backend core_services

#==============================================================================
# Frontend - HTTPS (SSL termination)
#==============================================================================
frontend https_front
    bind *:443 ssl crt /usr/local/etc/haproxy/certs/helixtrack.pem
    mode http

    # HTTP headers
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Real-IP %[src]

    # HSTS - HTTP Strict Transport Security
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

    # Security headers
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"

    # CORS handling
    capture request header origin len 128
    http-response add-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if { capture.req.hdr(0) -m found }
    http-response add-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" if { capture.req.hdr(0) -m found }
    http-response add-header Access-Control-Allow-Headers "Content-Type, Authorization" if { capture.req.hdr(0) -m found }
    http-response add-header Access-Control-Allow-Credentials true if { capture.req.hdr(0) -m found }

    # Handle OPTIONS requests
    http-request return status 200 content-type "text/plain" if METH_OPTIONS

    # Route to backend
    default_backend core_services

#==============================================================================
# Backend - Core Services with Consul Service Discovery
#==============================================================================
backend core_services
    mode http
    balance roundrobin

    # Health check configuration
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200

    # Connection pooling
    option http-keep-alive

    # Cookie-based session persistence (optional)
    # cookie SERVERID insert indirect nocache

    # Retry logic
    retries 3
    option redispatch

    # Server timeout
    timeout server 30s
    timeout connect 5s

    # Consul service discovery resolver
    # This section is manually configured for now
    # In production, use consul-template or similar for dynamic updates

    # Default servers (will be dynamically updated via Consul)
    # Format: server <name> <address>:<port> check inter <interval> fall <count> rise <count>

    server core-service-1 core-service:8080 check inter 10s fall 3 rise 2
    server core-service-2 core-service:8081 check inter 10s fall 3 rise 2 backup
    server core-service-3 core-service:8082 check inter 10s fall 3 rise 2 backup

    # Server health check settings:
    # - check: Enable health checks
    # - inter: Interval between checks (10 seconds)
    # - fall: Consecutive failures before marking down (3)
    # - rise: Consecutive successes before marking up (2)
    # - backup: Only use if primary servers are down

#==============================================================================
# Backend - Authentication Service
#==============================================================================
backend auth_services
    mode http
    balance roundrobin

    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200

    server auth-service-1 auth-service:8081 check inter 10s fall 3 rise 2
    server auth-service-2 auth-service:8082 check inter 10s fall 3 rise 2 backup

#==============================================================================
# Backend - Permissions Service
#==============================================================================
backend perm_services
    mode http
    balance roundrobin

    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200

    server perm-service-1 perm-service:8082 check inter 10s fall 3 rise 2
    server perm-service-2 perm-service:8083 check inter 10s fall 3 rise 2 backup

#==============================================================================
# Backend - Documents Extension
#==============================================================================
backend documents_services
    mode http
    balance roundrobin

    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200

    server documents-service-1 documents-service:8083 check inter 10s fall 3 rise 2
    server documents-service-2 documents-service:8084 check inter 10s fall 3 rise 2 backup

#==============================================================================
# ACL-based routing (Advanced)
#==============================================================================
# Uncomment to enable path-based routing

# frontend http_front
#     # Route based on path
#     acl is_auth path_beg /auth
#     acl is_perm path_beg /permissions
#     acl is_docs path_beg /documents
#
#     use_backend auth_services if is_auth
#     use_backend perm_services if is_perm
#     use_backend documents_services if is_docs
#     default_backend core_services

#==============================================================================
# Consul health check endpoint (for HAProxy itself)
#==============================================================================
frontend health_check
    bind *:8405
    mode http
    monitor-uri /health
    http-request return status 200 content-type "application/json" string "{\"status\":\"healthy\",\"service\":\"haproxy\"}"

#==============================================================================
# Prometheus metrics endpoint
#==============================================================================
frontend prometheus
    bind *:8406
    mode http
    http-request use-service prometheus-exporter if { path /metrics }
    no log
