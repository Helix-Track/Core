version: '3.8'

#############################################################################
# HelixTrack Production Docker Compose Configuration
#
# Features:
# - PostgreSQL with encryption support
# - Service discovery and rotation
# - Automatic port selection with broadcasting
# - Health checks and auto-restart
# - Resource limits
# - Comprehensive monitoring
# - All microservices orchestrated
#
# Usage:
#   docker-compose -f docker-compose-production.yml up -d
#   docker-compose -f docker-compose-production.yml down
#
# Environment Variables (see .env.production):
#   - POSTGRES_PASSWORD
#   - JWT_SECRET
#   - ENCRYPTION_KEY
#############################################################################

services:
  #############################################################################
  # CORE DATABASE - PostgreSQL with Encryption
  #############################################################################
  core-db:
    image: postgres:15-alpine
    container_name: helixtrack-core-db
    hostname: core-db
    restart: unless-stopped

    environment:
      - POSTGRES_DB=${CORE_DB_NAME:-helixtrack_core}
      - POSTGRES_USER=${CORE_DB_USER:-helixtrack}
      - POSTGRES_PASSWORD=${CORE_DB_PASSWORD:-helixtrack_secure_password_change_me}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
      # Enable SSL/TLS
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256

    volumes:
      - core-db-data:/var/lib/postgresql/data
      - ./Database/DDL:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/certs:/var/lib/postgresql/certs:ro

    ports:
      - "${CORE_DB_PORT:-5432}:5432"

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CORE_DB_USER:-helixtrack} -d ${CORE_DB_NAME:-helixtrack_core}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

    labels:
      - "com.helixtrack.service=database"
      - "com.helixtrack.component=core"
      - "com.helixtrack.version=1.0.0"

  #############################################################################
  # CORE SERVICE - Main Application
  #############################################################################
  core-service:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_VERSION: ${BUILD_VERSION:-1.0.0}
        BUILD_DATE: ${BUILD_DATE:-2025-10-19}
        BUILD_COMMIT: ${BUILD_COMMIT:-latest}

    container_name: helixtrack-core-service
    hostname: core-service
    restart: unless-stopped

    depends_on:
      core-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy

    environment:
      # Database
      - DB_TYPE=postgres
      - DB_HOST=core-db
      - DB_PORT=5432
      - DB_NAME=${CORE_DB_NAME:-helixtrack_core}
      - DB_USER=${CORE_DB_USER:-helixtrack}
      - DB_PASSWORD=${CORE_DB_PASSWORD:-helixtrack_secure_password_change_me}
      - DB_SSLMODE=require

      # Server
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=${CORE_PORT:-8080}
      - SERVER_PORT_RANGE_START=8080
      - SERVER_PORT_RANGE_END=8089
      - AUTO_PORT_SELECTION=true

      # Security
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-encryption-key-32-chars-min}

      # Service Discovery
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - SERVICE_NAME=helixtrack-core
      - SERVICE_ROTATION_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30s

      # Services URLs
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth-service:8081}
      - PERM_SERVICE_URL=${PERM_SERVICE_URL:-http://perm-service:8082}

    ports:
      - "${CORE_PORT:-8080}:${CORE_PORT:-8080}"
      - "${CORE_METRICS_PORT:-9090}:9090"

    volumes:
      - ./logs:/app/logs
      - ./Configurations:/app/Configurations:ro
      - core-uploads:/app/uploads

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${CORE_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
      replicas: ${CORE_REPLICAS:-1}

    labels:
      - "com.helixtrack.service=core"
      - "com.helixtrack.component=api"
      - "com.helixtrack.version=${BUILD_VERSION:-1.0.0}"
      - "com.helixtrack.port.auto=true"
      - "com.helixtrack.discovery=enabled"

  #############################################################################
  # SERVICE REGISTRY - Consul for Service Discovery
  #############################################################################
  service-registry:
    image: consul:1.16
    container_name: helixtrack-service-registry
    hostname: service-registry
    restart: unless-stopped

    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0

    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0

    ports:
      - "8500:8500"  # HTTP API
      - "8600:8600/udp"  # DNS

    volumes:
      - consul-data:/consul/data
      - ./docker/consul/config:/consul/config:ro

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

    labels:
      - "com.helixtrack.service=registry"
      - "com.helixtrack.component=discovery"

  #############################################################################
  # AUTHENTICATION SERVICE
  #############################################################################
  auth-service:
    build:
      context: ../Services/Authentication
      dockerfile: Dockerfile

    container_name: helixtrack-auth-service
    hostname: auth-service
    restart: unless-stopped

    depends_on:
      auth-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy

    environment:
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_NAME=${AUTH_DB_NAME:-helixtrack_auth}
      - DB_USER=${AUTH_DB_USER:-auth_user}
      - DB_PASSWORD=${AUTH_DB_PASSWORD:-auth_secure_password}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key-change-in-production}
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - AUTO_PORT_SELECTION=true
      - SERVER_PORT_RANGE_START=8081
      - SERVER_PORT_RANGE_END=8091

    ports:
      - "${AUTH_PORT:-8081}:${AUTH_PORT:-8081}"

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${AUTH_PORT:-8081}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
      replicas: ${AUTH_REPLICAS:-1}

    labels:
      - "com.helixtrack.service=authentication"
      - "com.helixtrack.port.auto=true"
      - "com.helixtrack.discovery=enabled"

  auth-db:
    image: postgres:15-alpine
    container_name: helixtrack-auth-db
    hostname: auth-db
    restart: unless-stopped

    environment:
      - POSTGRES_DB=${AUTH_DB_NAME:-helixtrack_auth}
      - POSTGRES_USER=${AUTH_DB_USER:-auth_user}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD:-auth_secure_password}
      - PGDATA=/var/lib/postgresql/data/pgdata

    volumes:
      - auth-db-data:/var/lib/postgresql/data
      - ./Database/DDL/Services/Authentication:/docker-entrypoint-initdb.d:ro

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-auth_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  #############################################################################
  # PERMISSIONS SERVICE
  #############################################################################
  perm-service:
    build:
      context: ../Services/Permissions
      dockerfile: Dockerfile

    container_name: helixtrack-perm-service
    hostname: perm-service
    restart: unless-stopped

    depends_on:
      perm-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy

    environment:
      - DB_HOST=perm-db
      - DB_PORT=5432
      - DB_NAME=${PERM_DB_NAME:-helixtrack_perm}
      - DB_USER=${PERM_DB_USER:-perm_user}
      - DB_PASSWORD=${PERM_DB_PASSWORD:-perm_secure_password}
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - AUTO_PORT_SELECTION=true
      - SERVER_PORT_RANGE_START=8082
      - SERVER_PORT_RANGE_END=8092

    ports:
      - "${PERM_PORT:-8082}:${PERM_PORT:-8082}"

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PERM_PORT:-8082}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
      replicas: ${PERM_REPLICAS:-1}

    labels:
      - "com.helixtrack.service=permissions"
      - "com.helixtrack.port.auto=true"
      - "com.helixtrack.discovery=enabled"

  perm-db:
    image: postgres:15-alpine
    container_name: helixtrack-perm-db
    hostname: perm-db
    restart: unless-stopped

    environment:
      - POSTGRES_DB=${PERM_DB_NAME:-helixtrack_perm}
      - POSTGRES_USER=${PERM_DB_USER:-perm_user}
      - POSTGRES_PASSWORD=${PERM_DB_PASSWORD:-perm_secure_password}
      - PGDATA=/var/lib/postgresql/data/pgdata

    volumes:
      - perm-db-data:/var/lib/postgresql/data

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PERM_DB_USER:-perm_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  #############################################################################
  # DOCUMENTS EXTENSION (Optional)
  #############################################################################
  documents-service:
    build:
      context: ../Services/Documents
      dockerfile: Dockerfile

    container_name: helixtrack-documents-service
    hostname: documents-service
    restart: unless-stopped
    profiles:
      - extensions
      - documents

    depends_on:
      documents-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy

    environment:
      - DB_HOST=documents-db
      - DB_PORT=5432
      - DB_NAME=${DOCS_DB_NAME:-helixtrack_documents}
      - DB_USER=${DOCS_DB_USER:-docs_user}
      - DB_PASSWORD=${DOCS_DB_PASSWORD:-docs_secure_password}
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - AUTO_PORT_SELECTION=true

    ports:
      - "${DOCS_PORT:-8083}:${DOCS_PORT:-8083}"

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${DOCS_PORT:-8083}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  documents-db:
    image: postgres:15-alpine
    container_name: helixtrack-documents-db
    hostname: documents-db
    restart: unless-stopped
    profiles:
      - extensions
      - documents

    environment:
      - POSTGRES_DB=${DOCS_DB_NAME:-helixtrack_documents}
      - POSTGRES_USER=${DOCS_DB_USER:-docs_user}
      - POSTGRES_PASSWORD=${DOCS_DB_PASSWORD:-docs_secure_password}
      - PGDATA=/var/lib/postgresql/data/pgdata

    volumes:
      - documents-db-data:/var/lib/postgresql/data
      - ./Database/DDL/Extensions/Documents:/docker-entrypoint-initdb.d:ro

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DOCS_DB_USER:-docs_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  #############################################################################
  # LOAD BALANCER - HAProxy
  #############################################################################
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: helixtrack-load-balancer
    hostname: load-balancer
    restart: unless-stopped

    depends_on:
      - core-service

    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats

    volumes:
      - ./docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./docker/haproxy/certs:/etc/haproxy/certs:ro

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8404"]
      interval: 30s
      timeout: 5s
      retries: 3

    labels:
      - "com.helixtrack.service=load-balancer"

  #############################################################################
  # MONITORING - Prometheus
  #############################################################################
  prometheus:
    image: prom/prometheus:latest
    container_name: helixtrack-prometheus
    hostname: prometheus
    restart: unless-stopped
    profiles:
      - monitoring

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

    ports:
      - "9091:9090"

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus-data:/prometheus

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  #############################################################################
  # MONITORING - Grafana
  #############################################################################
  grafana:
    image: grafana/grafana:latest
    container_name: helixtrack-grafana
    hostname: grafana
    restart: unless-stopped
    profiles:
      - monitoring

    depends_on:
      - prometheus

    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=grafana-db:5432
      - GF_DATABASE_NAME=${GRAFANA_DB_NAME:-grafana}
      - GF_DATABASE_USER=${GRAFANA_DB_USER:-grafana}
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD:-grafana_password}

    ports:
      - "3000:3000"

    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    networks:
      - helixtrack-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  grafana-db:
    image: postgres:15-alpine
    container_name: helixtrack-grafana-db
    hostname: grafana-db
    restart: unless-stopped
    profiles:
      - monitoring

    environment:
      - POSTGRES_DB=${GRAFANA_DB_NAME:-grafana}
      - POSTGRES_USER=${GRAFANA_DB_USER:-grafana}
      - POSTGRES_PASSWORD=${GRAFANA_DB_PASSWORD:-grafana_password}

    volumes:
      - grafana-db-data:/var/lib/postgresql/data

    networks:
      - helixtrack-network

#############################################################################
# NETWORKS
#############################################################################
networks:
  helixtrack-network:
    driver: bridge
    name: helixtrack-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

#############################################################################
# VOLUMES
#############################################################################
volumes:
  core-db-data:
    name: helixtrack-core-db-data
  auth-db-data:
    name: helixtrack-auth-db-data
  perm-db-data:
    name: helixtrack-perm-db-data
  documents-db-data:
    name: helixtrack-documents-db-data
  grafana-db-data:
    name: helixtrack-grafana-db-data
  core-uploads:
    name: helixtrack-core-uploads
  consul-data:
    name: helixtrack-consul-data
  prometheus-data:
    name: helixtrack-prometheus-data
  grafana-data:
    name: helixtrack-grafana-data
